<?php
/**
 * CustomerReturnsDeliveryHeadersApi
 * PHP version 7.4
 *
 * @category Class
 * @package  BeLenka\SAP\CustomerReturnsDelivery
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Customer Returns Delivery (A2X)
 *
 * This synchronous inbound service enables you to read, create, update, and delete customer returns deliveries. It can be consumed in Fiori apps and on other user interfaces.
 *
 * The version of the OpenAPI document: 2.1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BeLenka\SAP\CustomerReturnsDelivery\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use BeLenka\SAP\CustomerReturnsDelivery\ApiException;
use BeLenka\SAP\CustomerReturnsDelivery\Configuration;
use BeLenka\SAP\CustomerReturnsDelivery\HeaderSelector;
use BeLenka\SAP\CustomerReturnsDelivery\ObjectSerializer;

/**
 * CustomerReturnsDeliveryHeadersApi Class Doc Comment
 *
 * @category Class
 * @package  BeLenka\SAP\CustomerReturnsDelivery
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CustomerReturnsDeliveryHeadersApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'aReturnsDeliveryHeaderDeliveryDocumentDelete' => [
            'application/json',
        ],
        'aReturnsDeliveryHeaderDeliveryDocumentGet' => [
            'application/json',
        ],
        'aReturnsDeliveryHeaderDeliveryDocumentPatch' => [
            'application/json',
        ],
        'aReturnsDeliveryHeaderDeliveryDocumentToDeliveryDocumentItemGet' => [
            'application/json',
        ],
        'aReturnsDeliveryHeaderDeliveryDocumentToDeliveryDocumentPartnerGet' => [
            'application/json',
        ],
        'aReturnsDeliveryHeaderGet' => [
            'application/json',
        ],
        'aReturnsDeliveryHeaderPost' => [
            'application/json',
        ],
        'confirmPutawayAllItemsPost' => [
            'application/json',
        ],
        'confirmPutawayOneItemPost' => [
            'application/json',
        ],
        'postGoodsReceiptPost' => [
            'application/json',
        ],
        'putawayAllItemsPost' => [
            'application/json',
        ],
        'putawayOneItemPost' => [
            'application/json',
        ],
        'putawayOneItemWithBaseQuantityPost' => [
            'application/json',
        ],
        'putawayOneItemWithSalesQuantityPost' => [
            'application/json',
        ],
        'reverseGoodsReceiptPost' => [
            'application/json',
        ],
        'setPutawayQuantityWithBaseQuantityPost' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation aReturnsDeliveryHeaderDeliveryDocumentDelete
     *
     * Deletes customer returns deliveries.
     *
     * @param  string $delivery_document Delivery (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aReturnsDeliveryHeaderDeliveryDocumentDelete'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\CustomerReturnsDelivery\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function aReturnsDeliveryHeaderDeliveryDocumentDelete($delivery_document, string $contentType = self::contentTypes['aReturnsDeliveryHeaderDeliveryDocumentDelete'][0])
    {
        $this->aReturnsDeliveryHeaderDeliveryDocumentDeleteWithHttpInfo($delivery_document, $contentType);
    }

    /**
     * Operation aReturnsDeliveryHeaderDeliveryDocumentDeleteWithHttpInfo
     *
     * Deletes customer returns deliveries.
     *
     * @param  string $delivery_document Delivery (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aReturnsDeliveryHeaderDeliveryDocumentDelete'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\CustomerReturnsDelivery\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function aReturnsDeliveryHeaderDeliveryDocumentDeleteWithHttpInfo($delivery_document, string $contentType = self::contentTypes['aReturnsDeliveryHeaderDeliveryDocumentDelete'][0])
    {
        $request = $this->aReturnsDeliveryHeaderDeliveryDocumentDeleteRequest($delivery_document, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                
            }
            throw $e;
        }
    }

    /**
     * Operation aReturnsDeliveryHeaderDeliveryDocumentDeleteAsync
     *
     * Deletes customer returns deliveries.
     *
     * @param  string $delivery_document Delivery (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aReturnsDeliveryHeaderDeliveryDocumentDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aReturnsDeliveryHeaderDeliveryDocumentDeleteAsync($delivery_document, string $contentType = self::contentTypes['aReturnsDeliveryHeaderDeliveryDocumentDelete'][0])
    {
        return $this->aReturnsDeliveryHeaderDeliveryDocumentDeleteAsyncWithHttpInfo($delivery_document, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aReturnsDeliveryHeaderDeliveryDocumentDeleteAsyncWithHttpInfo
     *
     * Deletes customer returns deliveries.
     *
     * @param  string $delivery_document Delivery (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aReturnsDeliveryHeaderDeliveryDocumentDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aReturnsDeliveryHeaderDeliveryDocumentDeleteAsyncWithHttpInfo($delivery_document, string $contentType = self::contentTypes['aReturnsDeliveryHeaderDeliveryDocumentDelete'][0])
    {
        $returnType = '';
        $request = $this->aReturnsDeliveryHeaderDeliveryDocumentDeleteRequest($delivery_document, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aReturnsDeliveryHeaderDeliveryDocumentDelete'
     *
     * @param  string $delivery_document Delivery (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aReturnsDeliveryHeaderDeliveryDocumentDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aReturnsDeliveryHeaderDeliveryDocumentDeleteRequest($delivery_document, string $contentType = self::contentTypes['aReturnsDeliveryHeaderDeliveryDocumentDelete'][0])
    {

        // verify the required parameter 'delivery_document' is set
        if ($delivery_document === null || (is_array($delivery_document) && count($delivery_document) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_document when calling aReturnsDeliveryHeaderDeliveryDocumentDelete'
            );
        }
        if (strlen($delivery_document) > 10) {
            throw new \InvalidArgumentException('invalid length for "$delivery_document" when calling CustomerReturnsDeliveryHeadersApi.aReturnsDeliveryHeaderDeliveryDocumentDelete, must be smaller than or equal to 10.');
        }
        

        $resourcePath = '/A_ReturnsDeliveryHeader(\'{DeliveryDocument}\')';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($delivery_document !== null) {
            $resourcePath = str_replace(
                '{' . 'DeliveryDocument' . '}',
                ObjectSerializer::toPathValue($delivery_document),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aReturnsDeliveryHeaderDeliveryDocumentGet
     *
     * Reads customer returns delivery headers.
     *
     * @param  string $delivery_document Delivery (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aReturnsDeliveryHeaderDeliveryDocumentGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\CustomerReturnsDelivery\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\CustomerReturnsDelivery\Model\AReturnsDeliveryHeaderType|\BeLenka\SAP\CustomerReturnsDelivery\Model\Error
     */
    public function aReturnsDeliveryHeaderDeliveryDocumentGet($delivery_document, $select = null, $expand = null, string $contentType = self::contentTypes['aReturnsDeliveryHeaderDeliveryDocumentGet'][0])
    {
        list($response) = $this->aReturnsDeliveryHeaderDeliveryDocumentGetWithHttpInfo($delivery_document, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation aReturnsDeliveryHeaderDeliveryDocumentGetWithHttpInfo
     *
     * Reads customer returns delivery headers.
     *
     * @param  string $delivery_document Delivery (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aReturnsDeliveryHeaderDeliveryDocumentGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\CustomerReturnsDelivery\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\CustomerReturnsDelivery\Model\AReturnsDeliveryHeaderType|\BeLenka\SAP\CustomerReturnsDelivery\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aReturnsDeliveryHeaderDeliveryDocumentGetWithHttpInfo($delivery_document, $select = null, $expand = null, string $contentType = self::contentTypes['aReturnsDeliveryHeaderDeliveryDocumentGet'][0])
    {
        $request = $this->aReturnsDeliveryHeaderDeliveryDocumentGetRequest($delivery_document, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\CustomerReturnsDelivery\Model\AReturnsDeliveryHeaderType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\CustomerReturnsDelivery\Model\AReturnsDeliveryHeaderType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\CustomerReturnsDelivery\Model\AReturnsDeliveryHeaderType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\CustomerReturnsDelivery\Model\AReturnsDeliveryHeaderType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\CustomerReturnsDelivery\Model\AReturnsDeliveryHeaderType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aReturnsDeliveryHeaderDeliveryDocumentGetAsync
     *
     * Reads customer returns delivery headers.
     *
     * @param  string $delivery_document Delivery (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aReturnsDeliveryHeaderDeliveryDocumentGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aReturnsDeliveryHeaderDeliveryDocumentGetAsync($delivery_document, $select = null, $expand = null, string $contentType = self::contentTypes['aReturnsDeliveryHeaderDeliveryDocumentGet'][0])
    {
        return $this->aReturnsDeliveryHeaderDeliveryDocumentGetAsyncWithHttpInfo($delivery_document, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aReturnsDeliveryHeaderDeliveryDocumentGetAsyncWithHttpInfo
     *
     * Reads customer returns delivery headers.
     *
     * @param  string $delivery_document Delivery (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aReturnsDeliveryHeaderDeliveryDocumentGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aReturnsDeliveryHeaderDeliveryDocumentGetAsyncWithHttpInfo($delivery_document, $select = null, $expand = null, string $contentType = self::contentTypes['aReturnsDeliveryHeaderDeliveryDocumentGet'][0])
    {
        $returnType = '\BeLenka\SAP\CustomerReturnsDelivery\Model\AReturnsDeliveryHeaderType';
        $request = $this->aReturnsDeliveryHeaderDeliveryDocumentGetRequest($delivery_document, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aReturnsDeliveryHeaderDeliveryDocumentGet'
     *
     * @param  string $delivery_document Delivery (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aReturnsDeliveryHeaderDeliveryDocumentGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aReturnsDeliveryHeaderDeliveryDocumentGetRequest($delivery_document, $select = null, $expand = null, string $contentType = self::contentTypes['aReturnsDeliveryHeaderDeliveryDocumentGet'][0])
    {

        // verify the required parameter 'delivery_document' is set
        if ($delivery_document === null || (is_array($delivery_document) && count($delivery_document) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_document when calling aReturnsDeliveryHeaderDeliveryDocumentGet'
            );
        }
        if (strlen($delivery_document) > 10) {
            throw new \InvalidArgumentException('invalid length for "$delivery_document" when calling CustomerReturnsDeliveryHeadersApi.aReturnsDeliveryHeaderDeliveryDocumentGet, must be smaller than or equal to 10.');
        }
        
        
        

        $resourcePath = '/A_ReturnsDeliveryHeader(\'{DeliveryDocument}\')';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($delivery_document !== null) {
            $resourcePath = str_replace(
                '{' . 'DeliveryDocument' . '}',
                ObjectSerializer::toPathValue($delivery_document),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aReturnsDeliveryHeaderDeliveryDocumentPatch
     *
     * Updates customer returns delivery headers.
     *
     * @param  string $delivery_document Delivery (required)
     * @param  \BeLenka\SAP\CustomerReturnsDelivery\Model\ModifiedAReturnsDeliveryHeaderType $modified_a_returns_delivery_header_type New property values (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aReturnsDeliveryHeaderDeliveryDocumentPatch'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\CustomerReturnsDelivery\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function aReturnsDeliveryHeaderDeliveryDocumentPatch($delivery_document, $modified_a_returns_delivery_header_type, string $contentType = self::contentTypes['aReturnsDeliveryHeaderDeliveryDocumentPatch'][0])
    {
        $this->aReturnsDeliveryHeaderDeliveryDocumentPatchWithHttpInfo($delivery_document, $modified_a_returns_delivery_header_type, $contentType);
    }

    /**
     * Operation aReturnsDeliveryHeaderDeliveryDocumentPatchWithHttpInfo
     *
     * Updates customer returns delivery headers.
     *
     * @param  string $delivery_document Delivery (required)
     * @param  \BeLenka\SAP\CustomerReturnsDelivery\Model\ModifiedAReturnsDeliveryHeaderType $modified_a_returns_delivery_header_type New property values (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aReturnsDeliveryHeaderDeliveryDocumentPatch'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\CustomerReturnsDelivery\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function aReturnsDeliveryHeaderDeliveryDocumentPatchWithHttpInfo($delivery_document, $modified_a_returns_delivery_header_type, string $contentType = self::contentTypes['aReturnsDeliveryHeaderDeliveryDocumentPatch'][0])
    {
        $request = $this->aReturnsDeliveryHeaderDeliveryDocumentPatchRequest($delivery_document, $modified_a_returns_delivery_header_type, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                
            }
            throw $e;
        }
    }

    /**
     * Operation aReturnsDeliveryHeaderDeliveryDocumentPatchAsync
     *
     * Updates customer returns delivery headers.
     *
     * @param  string $delivery_document Delivery (required)
     * @param  \BeLenka\SAP\CustomerReturnsDelivery\Model\ModifiedAReturnsDeliveryHeaderType $modified_a_returns_delivery_header_type New property values (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aReturnsDeliveryHeaderDeliveryDocumentPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aReturnsDeliveryHeaderDeliveryDocumentPatchAsync($delivery_document, $modified_a_returns_delivery_header_type, string $contentType = self::contentTypes['aReturnsDeliveryHeaderDeliveryDocumentPatch'][0])
    {
        return $this->aReturnsDeliveryHeaderDeliveryDocumentPatchAsyncWithHttpInfo($delivery_document, $modified_a_returns_delivery_header_type, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aReturnsDeliveryHeaderDeliveryDocumentPatchAsyncWithHttpInfo
     *
     * Updates customer returns delivery headers.
     *
     * @param  string $delivery_document Delivery (required)
     * @param  \BeLenka\SAP\CustomerReturnsDelivery\Model\ModifiedAReturnsDeliveryHeaderType $modified_a_returns_delivery_header_type New property values (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aReturnsDeliveryHeaderDeliveryDocumentPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aReturnsDeliveryHeaderDeliveryDocumentPatchAsyncWithHttpInfo($delivery_document, $modified_a_returns_delivery_header_type, string $contentType = self::contentTypes['aReturnsDeliveryHeaderDeliveryDocumentPatch'][0])
    {
        $returnType = '';
        $request = $this->aReturnsDeliveryHeaderDeliveryDocumentPatchRequest($delivery_document, $modified_a_returns_delivery_header_type, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aReturnsDeliveryHeaderDeliveryDocumentPatch'
     *
     * @param  string $delivery_document Delivery (required)
     * @param  \BeLenka\SAP\CustomerReturnsDelivery\Model\ModifiedAReturnsDeliveryHeaderType $modified_a_returns_delivery_header_type New property values (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aReturnsDeliveryHeaderDeliveryDocumentPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aReturnsDeliveryHeaderDeliveryDocumentPatchRequest($delivery_document, $modified_a_returns_delivery_header_type, string $contentType = self::contentTypes['aReturnsDeliveryHeaderDeliveryDocumentPatch'][0])
    {

        // verify the required parameter 'delivery_document' is set
        if ($delivery_document === null || (is_array($delivery_document) && count($delivery_document) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_document when calling aReturnsDeliveryHeaderDeliveryDocumentPatch'
            );
        }
        if (strlen($delivery_document) > 10) {
            throw new \InvalidArgumentException('invalid length for "$delivery_document" when calling CustomerReturnsDeliveryHeadersApi.aReturnsDeliveryHeaderDeliveryDocumentPatch, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'modified_a_returns_delivery_header_type' is set
        if ($modified_a_returns_delivery_header_type === null || (is_array($modified_a_returns_delivery_header_type) && count($modified_a_returns_delivery_header_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $modified_a_returns_delivery_header_type when calling aReturnsDeliveryHeaderDeliveryDocumentPatch'
            );
        }


        $resourcePath = '/A_ReturnsDeliveryHeader(\'{DeliveryDocument}\')';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($delivery_document !== null) {
            $resourcePath = str_replace(
                '{' . 'DeliveryDocument' . '}',
                ObjectSerializer::toPathValue($delivery_document),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($modified_a_returns_delivery_header_type)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($modified_a_returns_delivery_header_type));
            } else {
                $httpBody = $modified_a_returns_delivery_header_type;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aReturnsDeliveryHeaderDeliveryDocumentToDeliveryDocumentItemGet
     *
     * Reads items of specific customer returns delivery header.
     *
     * @param  string $delivery_document Delivery (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $search Search items by search phrases, see [Searching](https://wiki.scn.sap.com/wiki/display/EmTech/SAP+Annotations+for+OData+Version+2.0#SAPAnnotationsforODataVersion2.0-Query_Option_searchQueryOptionsearch) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aReturnsDeliveryHeaderDeliveryDocumentToDeliveryDocumentItemGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\CustomerReturnsDelivery\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\CustomerReturnsDelivery\Model\Wrapper1|\BeLenka\SAP\CustomerReturnsDelivery\Model\Error
     */
    public function aReturnsDeliveryHeaderDeliveryDocumentToDeliveryDocumentItemGet($delivery_document, $top = null, $skip = null, $search = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aReturnsDeliveryHeaderDeliveryDocumentToDeliveryDocumentItemGet'][0])
    {
        list($response) = $this->aReturnsDeliveryHeaderDeliveryDocumentToDeliveryDocumentItemGetWithHttpInfo($delivery_document, $top, $skip, $search, $filter, $inlinecount, $orderby, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation aReturnsDeliveryHeaderDeliveryDocumentToDeliveryDocumentItemGetWithHttpInfo
     *
     * Reads items of specific customer returns delivery header.
     *
     * @param  string $delivery_document Delivery (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $search Search items by search phrases, see [Searching](https://wiki.scn.sap.com/wiki/display/EmTech/SAP+Annotations+for+OData+Version+2.0#SAPAnnotationsforODataVersion2.0-Query_Option_searchQueryOptionsearch) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aReturnsDeliveryHeaderDeliveryDocumentToDeliveryDocumentItemGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\CustomerReturnsDelivery\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\CustomerReturnsDelivery\Model\Wrapper1|\BeLenka\SAP\CustomerReturnsDelivery\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aReturnsDeliveryHeaderDeliveryDocumentToDeliveryDocumentItemGetWithHttpInfo($delivery_document, $top = null, $skip = null, $search = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aReturnsDeliveryHeaderDeliveryDocumentToDeliveryDocumentItemGet'][0])
    {
        $request = $this->aReturnsDeliveryHeaderDeliveryDocumentToDeliveryDocumentItemGetRequest($delivery_document, $top, $skip, $search, $filter, $inlinecount, $orderby, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\CustomerReturnsDelivery\Model\Wrapper1' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\CustomerReturnsDelivery\Model\Wrapper1' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\CustomerReturnsDelivery\Model\Wrapper1', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\CustomerReturnsDelivery\Model\Wrapper1';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\CustomerReturnsDelivery\Model\Wrapper1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aReturnsDeliveryHeaderDeliveryDocumentToDeliveryDocumentItemGetAsync
     *
     * Reads items of specific customer returns delivery header.
     *
     * @param  string $delivery_document Delivery (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $search Search items by search phrases, see [Searching](https://wiki.scn.sap.com/wiki/display/EmTech/SAP+Annotations+for+OData+Version+2.0#SAPAnnotationsforODataVersion2.0-Query_Option_searchQueryOptionsearch) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aReturnsDeliveryHeaderDeliveryDocumentToDeliveryDocumentItemGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aReturnsDeliveryHeaderDeliveryDocumentToDeliveryDocumentItemGetAsync($delivery_document, $top = null, $skip = null, $search = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aReturnsDeliveryHeaderDeliveryDocumentToDeliveryDocumentItemGet'][0])
    {
        return $this->aReturnsDeliveryHeaderDeliveryDocumentToDeliveryDocumentItemGetAsyncWithHttpInfo($delivery_document, $top, $skip, $search, $filter, $inlinecount, $orderby, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aReturnsDeliveryHeaderDeliveryDocumentToDeliveryDocumentItemGetAsyncWithHttpInfo
     *
     * Reads items of specific customer returns delivery header.
     *
     * @param  string $delivery_document Delivery (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $search Search items by search phrases, see [Searching](https://wiki.scn.sap.com/wiki/display/EmTech/SAP+Annotations+for+OData+Version+2.0#SAPAnnotationsforODataVersion2.0-Query_Option_searchQueryOptionsearch) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aReturnsDeliveryHeaderDeliveryDocumentToDeliveryDocumentItemGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aReturnsDeliveryHeaderDeliveryDocumentToDeliveryDocumentItemGetAsyncWithHttpInfo($delivery_document, $top = null, $skip = null, $search = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aReturnsDeliveryHeaderDeliveryDocumentToDeliveryDocumentItemGet'][0])
    {
        $returnType = '\BeLenka\SAP\CustomerReturnsDelivery\Model\Wrapper1';
        $request = $this->aReturnsDeliveryHeaderDeliveryDocumentToDeliveryDocumentItemGetRequest($delivery_document, $top, $skip, $search, $filter, $inlinecount, $orderby, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aReturnsDeliveryHeaderDeliveryDocumentToDeliveryDocumentItemGet'
     *
     * @param  string $delivery_document Delivery (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $search Search items by search phrases, see [Searching](https://wiki.scn.sap.com/wiki/display/EmTech/SAP+Annotations+for+OData+Version+2.0#SAPAnnotationsforODataVersion2.0-Query_Option_searchQueryOptionsearch) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aReturnsDeliveryHeaderDeliveryDocumentToDeliveryDocumentItemGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aReturnsDeliveryHeaderDeliveryDocumentToDeliveryDocumentItemGetRequest($delivery_document, $top = null, $skip = null, $search = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aReturnsDeliveryHeaderDeliveryDocumentToDeliveryDocumentItemGet'][0])
    {

        // verify the required parameter 'delivery_document' is set
        if ($delivery_document === null || (is_array($delivery_document) && count($delivery_document) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_document when calling aReturnsDeliveryHeaderDeliveryDocumentToDeliveryDocumentItemGet'
            );
        }
        if (strlen($delivery_document) > 10) {
            throw new \InvalidArgumentException('invalid length for "$delivery_document" when calling CustomerReturnsDeliveryHeadersApi.aReturnsDeliveryHeaderDeliveryDocumentToDeliveryDocumentItemGet, must be smaller than or equal to 10.');
        }
        
        if ($top !== null && $top < 0) {
            throw new \InvalidArgumentException('invalid value for "$top" when calling CustomerReturnsDeliveryHeadersApi.aReturnsDeliveryHeaderDeliveryDocumentToDeliveryDocumentItemGet, must be bigger than or equal to 0.');
        }
        
        if ($skip !== null && $skip < 0) {
            throw new \InvalidArgumentException('invalid value for "$skip" when calling CustomerReturnsDeliveryHeadersApi.aReturnsDeliveryHeaderDeliveryDocumentToDeliveryDocumentItemGet, must be bigger than or equal to 0.');
        }
        



        
        
        

        $resourcePath = '/A_ReturnsDeliveryHeader(\'{DeliveryDocument}\')/to_DeliveryDocumentItem';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $top,
            '$top', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            '$skip', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $search,
            'search', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            '$filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $inlinecount,
            '$inlinecount', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderby,
            '$orderby', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($delivery_document !== null) {
            $resourcePath = str_replace(
                '{' . 'DeliveryDocument' . '}',
                ObjectSerializer::toPathValue($delivery_document),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aReturnsDeliveryHeaderDeliveryDocumentToDeliveryDocumentPartnerGet
     *
     * Reads partners of specific customer returns delivery header.
     *
     * @param  string $delivery_document Delivery (required)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aReturnsDeliveryHeaderDeliveryDocumentToDeliveryDocumentPartnerGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\CustomerReturnsDelivery\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\CustomerReturnsDelivery\Model\Wrapper2|\BeLenka\SAP\CustomerReturnsDelivery\Model\Error
     */
    public function aReturnsDeliveryHeaderDeliveryDocumentToDeliveryDocumentPartnerGet($delivery_document, $filter = null, $inlinecount = null, $select = null, $expand = null, string $contentType = self::contentTypes['aReturnsDeliveryHeaderDeliveryDocumentToDeliveryDocumentPartnerGet'][0])
    {
        list($response) = $this->aReturnsDeliveryHeaderDeliveryDocumentToDeliveryDocumentPartnerGetWithHttpInfo($delivery_document, $filter, $inlinecount, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation aReturnsDeliveryHeaderDeliveryDocumentToDeliveryDocumentPartnerGetWithHttpInfo
     *
     * Reads partners of specific customer returns delivery header.
     *
     * @param  string $delivery_document Delivery (required)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aReturnsDeliveryHeaderDeliveryDocumentToDeliveryDocumentPartnerGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\CustomerReturnsDelivery\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\CustomerReturnsDelivery\Model\Wrapper2|\BeLenka\SAP\CustomerReturnsDelivery\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aReturnsDeliveryHeaderDeliveryDocumentToDeliveryDocumentPartnerGetWithHttpInfo($delivery_document, $filter = null, $inlinecount = null, $select = null, $expand = null, string $contentType = self::contentTypes['aReturnsDeliveryHeaderDeliveryDocumentToDeliveryDocumentPartnerGet'][0])
    {
        $request = $this->aReturnsDeliveryHeaderDeliveryDocumentToDeliveryDocumentPartnerGetRequest($delivery_document, $filter, $inlinecount, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\CustomerReturnsDelivery\Model\Wrapper2' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\CustomerReturnsDelivery\Model\Wrapper2' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\CustomerReturnsDelivery\Model\Wrapper2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\CustomerReturnsDelivery\Model\Wrapper2';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\CustomerReturnsDelivery\Model\Wrapper2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aReturnsDeliveryHeaderDeliveryDocumentToDeliveryDocumentPartnerGetAsync
     *
     * Reads partners of specific customer returns delivery header.
     *
     * @param  string $delivery_document Delivery (required)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aReturnsDeliveryHeaderDeliveryDocumentToDeliveryDocumentPartnerGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aReturnsDeliveryHeaderDeliveryDocumentToDeliveryDocumentPartnerGetAsync($delivery_document, $filter = null, $inlinecount = null, $select = null, $expand = null, string $contentType = self::contentTypes['aReturnsDeliveryHeaderDeliveryDocumentToDeliveryDocumentPartnerGet'][0])
    {
        return $this->aReturnsDeliveryHeaderDeliveryDocumentToDeliveryDocumentPartnerGetAsyncWithHttpInfo($delivery_document, $filter, $inlinecount, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aReturnsDeliveryHeaderDeliveryDocumentToDeliveryDocumentPartnerGetAsyncWithHttpInfo
     *
     * Reads partners of specific customer returns delivery header.
     *
     * @param  string $delivery_document Delivery (required)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aReturnsDeliveryHeaderDeliveryDocumentToDeliveryDocumentPartnerGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aReturnsDeliveryHeaderDeliveryDocumentToDeliveryDocumentPartnerGetAsyncWithHttpInfo($delivery_document, $filter = null, $inlinecount = null, $select = null, $expand = null, string $contentType = self::contentTypes['aReturnsDeliveryHeaderDeliveryDocumentToDeliveryDocumentPartnerGet'][0])
    {
        $returnType = '\BeLenka\SAP\CustomerReturnsDelivery\Model\Wrapper2';
        $request = $this->aReturnsDeliveryHeaderDeliveryDocumentToDeliveryDocumentPartnerGetRequest($delivery_document, $filter, $inlinecount, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aReturnsDeliveryHeaderDeliveryDocumentToDeliveryDocumentPartnerGet'
     *
     * @param  string $delivery_document Delivery (required)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aReturnsDeliveryHeaderDeliveryDocumentToDeliveryDocumentPartnerGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aReturnsDeliveryHeaderDeliveryDocumentToDeliveryDocumentPartnerGetRequest($delivery_document, $filter = null, $inlinecount = null, $select = null, $expand = null, string $contentType = self::contentTypes['aReturnsDeliveryHeaderDeliveryDocumentToDeliveryDocumentPartnerGet'][0])
    {

        // verify the required parameter 'delivery_document' is set
        if ($delivery_document === null || (is_array($delivery_document) && count($delivery_document) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_document when calling aReturnsDeliveryHeaderDeliveryDocumentToDeliveryDocumentPartnerGet'
            );
        }
        if (strlen($delivery_document) > 10) {
            throw new \InvalidArgumentException('invalid length for "$delivery_document" when calling CustomerReturnsDeliveryHeadersApi.aReturnsDeliveryHeaderDeliveryDocumentToDeliveryDocumentPartnerGet, must be smaller than or equal to 10.');
        }
        


        
        

        $resourcePath = '/A_ReturnsDeliveryHeader(\'{DeliveryDocument}\')/to_DeliveryDocumentPartner';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            '$filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $inlinecount,
            '$inlinecount', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($delivery_document !== null) {
            $resourcePath = str_replace(
                '{' . 'DeliveryDocument' . '}',
                ObjectSerializer::toPathValue($delivery_document),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aReturnsDeliveryHeaderGet
     *
     * Reads customer returns delivery headers.
     *
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $search Search items by search phrases, see [Searching](https://wiki.scn.sap.com/wiki/display/EmTech/SAP+Annotations+for+OData+Version+2.0#SAPAnnotationsforODataVersion2.0-Query_Option_searchQueryOptionsearch) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aReturnsDeliveryHeaderGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\CustomerReturnsDelivery\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\CustomerReturnsDelivery\Model\Wrapper|\BeLenka\SAP\CustomerReturnsDelivery\Model\Error
     */
    public function aReturnsDeliveryHeaderGet($top = null, $skip = null, $search = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aReturnsDeliveryHeaderGet'][0])
    {
        list($response) = $this->aReturnsDeliveryHeaderGetWithHttpInfo($top, $skip, $search, $filter, $inlinecount, $orderby, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation aReturnsDeliveryHeaderGetWithHttpInfo
     *
     * Reads customer returns delivery headers.
     *
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $search Search items by search phrases, see [Searching](https://wiki.scn.sap.com/wiki/display/EmTech/SAP+Annotations+for+OData+Version+2.0#SAPAnnotationsforODataVersion2.0-Query_Option_searchQueryOptionsearch) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aReturnsDeliveryHeaderGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\CustomerReturnsDelivery\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\CustomerReturnsDelivery\Model\Wrapper|\BeLenka\SAP\CustomerReturnsDelivery\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aReturnsDeliveryHeaderGetWithHttpInfo($top = null, $skip = null, $search = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aReturnsDeliveryHeaderGet'][0])
    {
        $request = $this->aReturnsDeliveryHeaderGetRequest($top, $skip, $search, $filter, $inlinecount, $orderby, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\CustomerReturnsDelivery\Model\Wrapper' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\CustomerReturnsDelivery\Model\Wrapper' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\CustomerReturnsDelivery\Model\Wrapper', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\CustomerReturnsDelivery\Model\Wrapper';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\CustomerReturnsDelivery\Model\Wrapper',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aReturnsDeliveryHeaderGetAsync
     *
     * Reads customer returns delivery headers.
     *
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $search Search items by search phrases, see [Searching](https://wiki.scn.sap.com/wiki/display/EmTech/SAP+Annotations+for+OData+Version+2.0#SAPAnnotationsforODataVersion2.0-Query_Option_searchQueryOptionsearch) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aReturnsDeliveryHeaderGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aReturnsDeliveryHeaderGetAsync($top = null, $skip = null, $search = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aReturnsDeliveryHeaderGet'][0])
    {
        return $this->aReturnsDeliveryHeaderGetAsyncWithHttpInfo($top, $skip, $search, $filter, $inlinecount, $orderby, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aReturnsDeliveryHeaderGetAsyncWithHttpInfo
     *
     * Reads customer returns delivery headers.
     *
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $search Search items by search phrases, see [Searching](https://wiki.scn.sap.com/wiki/display/EmTech/SAP+Annotations+for+OData+Version+2.0#SAPAnnotationsforODataVersion2.0-Query_Option_searchQueryOptionsearch) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aReturnsDeliveryHeaderGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aReturnsDeliveryHeaderGetAsyncWithHttpInfo($top = null, $skip = null, $search = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aReturnsDeliveryHeaderGet'][0])
    {
        $returnType = '\BeLenka\SAP\CustomerReturnsDelivery\Model\Wrapper';
        $request = $this->aReturnsDeliveryHeaderGetRequest($top, $skip, $search, $filter, $inlinecount, $orderby, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aReturnsDeliveryHeaderGet'
     *
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $search Search items by search phrases, see [Searching](https://wiki.scn.sap.com/wiki/display/EmTech/SAP+Annotations+for+OData+Version+2.0#SAPAnnotationsforODataVersion2.0-Query_Option_searchQueryOptionsearch) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aReturnsDeliveryHeaderGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aReturnsDeliveryHeaderGetRequest($top = null, $skip = null, $search = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aReturnsDeliveryHeaderGet'][0])
    {

        if ($top !== null && $top < 0) {
            throw new \InvalidArgumentException('invalid value for "$top" when calling CustomerReturnsDeliveryHeadersApi.aReturnsDeliveryHeaderGet, must be bigger than or equal to 0.');
        }
        
        if ($skip !== null && $skip < 0) {
            throw new \InvalidArgumentException('invalid value for "$skip" when calling CustomerReturnsDeliveryHeadersApi.aReturnsDeliveryHeaderGet, must be bigger than or equal to 0.');
        }
        



        
        
        

        $resourcePath = '/A_ReturnsDeliveryHeader';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $top,
            '$top', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            '$skip', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $search,
            'search', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            '$filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $inlinecount,
            '$inlinecount', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderby,
            '$orderby', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aReturnsDeliveryHeaderPost
     *
     * Creates customer returns deliveries with reference to preceding document.
     *
     * @param  \BeLenka\SAP\CustomerReturnsDelivery\Model\APICUSTOMERRETURNSDELIVERYSRVAReturnsDeliveryHeaderTypeCreate $apicustomerreturnsdeliverysrva_returns_delivery_header_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aReturnsDeliveryHeaderPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\CustomerReturnsDelivery\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\CustomerReturnsDelivery\Model\AReturnsDeliveryHeaderType|\BeLenka\SAP\CustomerReturnsDelivery\Model\Error
     */
    public function aReturnsDeliveryHeaderPost($apicustomerreturnsdeliverysrva_returns_delivery_header_type_create, string $contentType = self::contentTypes['aReturnsDeliveryHeaderPost'][0])
    {
        list($response) = $this->aReturnsDeliveryHeaderPostWithHttpInfo($apicustomerreturnsdeliverysrva_returns_delivery_header_type_create, $contentType);
        return $response;
    }

    /**
     * Operation aReturnsDeliveryHeaderPostWithHttpInfo
     *
     * Creates customer returns deliveries with reference to preceding document.
     *
     * @param  \BeLenka\SAP\CustomerReturnsDelivery\Model\APICUSTOMERRETURNSDELIVERYSRVAReturnsDeliveryHeaderTypeCreate $apicustomerreturnsdeliverysrva_returns_delivery_header_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aReturnsDeliveryHeaderPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\CustomerReturnsDelivery\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\CustomerReturnsDelivery\Model\AReturnsDeliveryHeaderType|\BeLenka\SAP\CustomerReturnsDelivery\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aReturnsDeliveryHeaderPostWithHttpInfo($apicustomerreturnsdeliverysrva_returns_delivery_header_type_create, string $contentType = self::contentTypes['aReturnsDeliveryHeaderPost'][0])
    {
        $request = $this->aReturnsDeliveryHeaderPostRequest($apicustomerreturnsdeliverysrva_returns_delivery_header_type_create, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\BeLenka\SAP\CustomerReturnsDelivery\Model\AReturnsDeliveryHeaderType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\CustomerReturnsDelivery\Model\AReturnsDeliveryHeaderType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\CustomerReturnsDelivery\Model\AReturnsDeliveryHeaderType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\CustomerReturnsDelivery\Model\AReturnsDeliveryHeaderType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\CustomerReturnsDelivery\Model\AReturnsDeliveryHeaderType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aReturnsDeliveryHeaderPostAsync
     *
     * Creates customer returns deliveries with reference to preceding document.
     *
     * @param  \BeLenka\SAP\CustomerReturnsDelivery\Model\APICUSTOMERRETURNSDELIVERYSRVAReturnsDeliveryHeaderTypeCreate $apicustomerreturnsdeliverysrva_returns_delivery_header_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aReturnsDeliveryHeaderPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aReturnsDeliveryHeaderPostAsync($apicustomerreturnsdeliverysrva_returns_delivery_header_type_create, string $contentType = self::contentTypes['aReturnsDeliveryHeaderPost'][0])
    {
        return $this->aReturnsDeliveryHeaderPostAsyncWithHttpInfo($apicustomerreturnsdeliverysrva_returns_delivery_header_type_create, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aReturnsDeliveryHeaderPostAsyncWithHttpInfo
     *
     * Creates customer returns deliveries with reference to preceding document.
     *
     * @param  \BeLenka\SAP\CustomerReturnsDelivery\Model\APICUSTOMERRETURNSDELIVERYSRVAReturnsDeliveryHeaderTypeCreate $apicustomerreturnsdeliverysrva_returns_delivery_header_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aReturnsDeliveryHeaderPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aReturnsDeliveryHeaderPostAsyncWithHttpInfo($apicustomerreturnsdeliverysrva_returns_delivery_header_type_create, string $contentType = self::contentTypes['aReturnsDeliveryHeaderPost'][0])
    {
        $returnType = '\BeLenka\SAP\CustomerReturnsDelivery\Model\AReturnsDeliveryHeaderType';
        $request = $this->aReturnsDeliveryHeaderPostRequest($apicustomerreturnsdeliverysrva_returns_delivery_header_type_create, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aReturnsDeliveryHeaderPost'
     *
     * @param  \BeLenka\SAP\CustomerReturnsDelivery\Model\APICUSTOMERRETURNSDELIVERYSRVAReturnsDeliveryHeaderTypeCreate $apicustomerreturnsdeliverysrva_returns_delivery_header_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aReturnsDeliveryHeaderPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aReturnsDeliveryHeaderPostRequest($apicustomerreturnsdeliverysrva_returns_delivery_header_type_create, string $contentType = self::contentTypes['aReturnsDeliveryHeaderPost'][0])
    {

        // verify the required parameter 'apicustomerreturnsdeliverysrva_returns_delivery_header_type_create' is set
        if ($apicustomerreturnsdeliverysrva_returns_delivery_header_type_create === null || (is_array($apicustomerreturnsdeliverysrva_returns_delivery_header_type_create) && count($apicustomerreturnsdeliverysrva_returns_delivery_header_type_create) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apicustomerreturnsdeliverysrva_returns_delivery_header_type_create when calling aReturnsDeliveryHeaderPost'
            );
        }


        $resourcePath = '/A_ReturnsDeliveryHeader';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($apicustomerreturnsdeliverysrva_returns_delivery_header_type_create)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($apicustomerreturnsdeliverysrva_returns_delivery_header_type_create));
            } else {
                $httpBody = $apicustomerreturnsdeliverysrva_returns_delivery_header_type_create;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation confirmPutawayAllItemsPost
     *
     * Confirms putaway quantity of customer returns delivery items.
     *
     * @param  string $delivery_document Delivery   (Value needs to be enclosed in single quotes) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['confirmPutawayAllItemsPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\CustomerReturnsDelivery\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\CustomerReturnsDelivery\Model\Wrapper6|\BeLenka\SAP\CustomerReturnsDelivery\Model\Error
     */
    public function confirmPutawayAllItemsPost($delivery_document, string $contentType = self::contentTypes['confirmPutawayAllItemsPost'][0])
    {
        list($response) = $this->confirmPutawayAllItemsPostWithHttpInfo($delivery_document, $contentType);
        return $response;
    }

    /**
     * Operation confirmPutawayAllItemsPostWithHttpInfo
     *
     * Confirms putaway quantity of customer returns delivery items.
     *
     * @param  string $delivery_document Delivery   (Value needs to be enclosed in single quotes) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['confirmPutawayAllItemsPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\CustomerReturnsDelivery\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\CustomerReturnsDelivery\Model\Wrapper6|\BeLenka\SAP\CustomerReturnsDelivery\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function confirmPutawayAllItemsPostWithHttpInfo($delivery_document, string $contentType = self::contentTypes['confirmPutawayAllItemsPost'][0])
    {
        $request = $this->confirmPutawayAllItemsPostRequest($delivery_document, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\CustomerReturnsDelivery\Model\Wrapper6' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\CustomerReturnsDelivery\Model\Wrapper6' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\CustomerReturnsDelivery\Model\Wrapper6', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\CustomerReturnsDelivery\Model\Wrapper6';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\CustomerReturnsDelivery\Model\Wrapper6',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation confirmPutawayAllItemsPostAsync
     *
     * Confirms putaway quantity of customer returns delivery items.
     *
     * @param  string $delivery_document Delivery   (Value needs to be enclosed in single quotes) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['confirmPutawayAllItemsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function confirmPutawayAllItemsPostAsync($delivery_document, string $contentType = self::contentTypes['confirmPutawayAllItemsPost'][0])
    {
        return $this->confirmPutawayAllItemsPostAsyncWithHttpInfo($delivery_document, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation confirmPutawayAllItemsPostAsyncWithHttpInfo
     *
     * Confirms putaway quantity of customer returns delivery items.
     *
     * @param  string $delivery_document Delivery   (Value needs to be enclosed in single quotes) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['confirmPutawayAllItemsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function confirmPutawayAllItemsPostAsyncWithHttpInfo($delivery_document, string $contentType = self::contentTypes['confirmPutawayAllItemsPost'][0])
    {
        $returnType = '\BeLenka\SAP\CustomerReturnsDelivery\Model\Wrapper6';
        $request = $this->confirmPutawayAllItemsPostRequest($delivery_document, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'confirmPutawayAllItemsPost'
     *
     * @param  string $delivery_document Delivery   (Value needs to be enclosed in single quotes) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['confirmPutawayAllItemsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function confirmPutawayAllItemsPostRequest($delivery_document, string $contentType = self::contentTypes['confirmPutawayAllItemsPost'][0])
    {

        // verify the required parameter 'delivery_document' is set
        if ($delivery_document === null || (is_array($delivery_document) && count($delivery_document) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_document when calling confirmPutawayAllItemsPost'
            );
        }
        if (strlen($delivery_document) > 12) {
            throw new \InvalidArgumentException('invalid length for "$delivery_document" when calling CustomerReturnsDeliveryHeadersApi.confirmPutawayAllItemsPost, must be smaller than or equal to 12.');
        }
        if (!preg_match("/^'[^']*(''[^']*)*'$/", $delivery_document)) {
            throw new \InvalidArgumentException("invalid value for \"delivery_document\" when calling CustomerReturnsDeliveryHeadersApi.confirmPutawayAllItemsPost, must conform to the pattern /^'[^']*(''[^']*)*'$/.");
        }
        

        $resourcePath = '/ConfirmPutawayAllItems';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $delivery_document,
            'DeliveryDocument', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation confirmPutawayOneItemPost
     *
     * Confirms putaway quantity of customer returns delivery item.
     *
     * @param  string $delivery_document Delivery   (Value needs to be enclosed in single quotes) (required)
     * @param  string $delivery_document_item Item   (Value needs to be enclosed in single quotes) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['confirmPutawayOneItemPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\CustomerReturnsDelivery\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\CustomerReturnsDelivery\Model\Wrapper6|\BeLenka\SAP\CustomerReturnsDelivery\Model\Error
     */
    public function confirmPutawayOneItemPost($delivery_document, $delivery_document_item, string $contentType = self::contentTypes['confirmPutawayOneItemPost'][0])
    {
        list($response) = $this->confirmPutawayOneItemPostWithHttpInfo($delivery_document, $delivery_document_item, $contentType);
        return $response;
    }

    /**
     * Operation confirmPutawayOneItemPostWithHttpInfo
     *
     * Confirms putaway quantity of customer returns delivery item.
     *
     * @param  string $delivery_document Delivery   (Value needs to be enclosed in single quotes) (required)
     * @param  string $delivery_document_item Item   (Value needs to be enclosed in single quotes) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['confirmPutawayOneItemPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\CustomerReturnsDelivery\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\CustomerReturnsDelivery\Model\Wrapper6|\BeLenka\SAP\CustomerReturnsDelivery\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function confirmPutawayOneItemPostWithHttpInfo($delivery_document, $delivery_document_item, string $contentType = self::contentTypes['confirmPutawayOneItemPost'][0])
    {
        $request = $this->confirmPutawayOneItemPostRequest($delivery_document, $delivery_document_item, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\CustomerReturnsDelivery\Model\Wrapper6' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\CustomerReturnsDelivery\Model\Wrapper6' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\CustomerReturnsDelivery\Model\Wrapper6', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\CustomerReturnsDelivery\Model\Wrapper6';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\CustomerReturnsDelivery\Model\Wrapper6',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation confirmPutawayOneItemPostAsync
     *
     * Confirms putaway quantity of customer returns delivery item.
     *
     * @param  string $delivery_document Delivery   (Value needs to be enclosed in single quotes) (required)
     * @param  string $delivery_document_item Item   (Value needs to be enclosed in single quotes) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['confirmPutawayOneItemPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function confirmPutawayOneItemPostAsync($delivery_document, $delivery_document_item, string $contentType = self::contentTypes['confirmPutawayOneItemPost'][0])
    {
        return $this->confirmPutawayOneItemPostAsyncWithHttpInfo($delivery_document, $delivery_document_item, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation confirmPutawayOneItemPostAsyncWithHttpInfo
     *
     * Confirms putaway quantity of customer returns delivery item.
     *
     * @param  string $delivery_document Delivery   (Value needs to be enclosed in single quotes) (required)
     * @param  string $delivery_document_item Item   (Value needs to be enclosed in single quotes) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['confirmPutawayOneItemPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function confirmPutawayOneItemPostAsyncWithHttpInfo($delivery_document, $delivery_document_item, string $contentType = self::contentTypes['confirmPutawayOneItemPost'][0])
    {
        $returnType = '\BeLenka\SAP\CustomerReturnsDelivery\Model\Wrapper6';
        $request = $this->confirmPutawayOneItemPostRequest($delivery_document, $delivery_document_item, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'confirmPutawayOneItemPost'
     *
     * @param  string $delivery_document Delivery   (Value needs to be enclosed in single quotes) (required)
     * @param  string $delivery_document_item Item   (Value needs to be enclosed in single quotes) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['confirmPutawayOneItemPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function confirmPutawayOneItemPostRequest($delivery_document, $delivery_document_item, string $contentType = self::contentTypes['confirmPutawayOneItemPost'][0])
    {

        // verify the required parameter 'delivery_document' is set
        if ($delivery_document === null || (is_array($delivery_document) && count($delivery_document) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_document when calling confirmPutawayOneItemPost'
            );
        }
        if (strlen($delivery_document) > 12) {
            throw new \InvalidArgumentException('invalid length for "$delivery_document" when calling CustomerReturnsDeliveryHeadersApi.confirmPutawayOneItemPost, must be smaller than or equal to 12.');
        }
        if (!preg_match("/^'[^']*(''[^']*)*'$/", $delivery_document)) {
            throw new \InvalidArgumentException("invalid value for \"delivery_document\" when calling CustomerReturnsDeliveryHeadersApi.confirmPutawayOneItemPost, must conform to the pattern /^'[^']*(''[^']*)*'$/.");
        }
        
        // verify the required parameter 'delivery_document_item' is set
        if ($delivery_document_item === null || (is_array($delivery_document_item) && count($delivery_document_item) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_document_item when calling confirmPutawayOneItemPost'
            );
        }
        if (strlen($delivery_document_item) > 8) {
            throw new \InvalidArgumentException('invalid length for "$delivery_document_item" when calling CustomerReturnsDeliveryHeadersApi.confirmPutawayOneItemPost, must be smaller than or equal to 8.');
        }
        if (!preg_match("/^'[^']*(''[^']*)*'$/", $delivery_document_item)) {
            throw new \InvalidArgumentException("invalid value for \"delivery_document_item\" when calling CustomerReturnsDeliveryHeadersApi.confirmPutawayOneItemPost, must conform to the pattern /^'[^']*(''[^']*)*'$/.");
        }
        

        $resourcePath = '/ConfirmPutawayOneItem';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $delivery_document,
            'DeliveryDocument', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $delivery_document_item,
            'DeliveryDocumentItem', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postGoodsReceiptPost
     *
     * Posts goods receipt for customer returns delivery.
     *
     * @param  string $delivery_document Delivery   (Value needs to be enclosed in single quotes) (required)
     * @param  string $actual_goods_movement_date Actual GI Date   (Value needs to be enclosed in single quotes and prefixed with &#x60;datetime&#x60;, e.g. &#x60;datetime&#39;2017-12-31T00:00&#39;&#x60;) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postGoodsReceiptPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\CustomerReturnsDelivery\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\CustomerReturnsDelivery\Model\Wrapper6|\BeLenka\SAP\CustomerReturnsDelivery\Model\Error
     */
    public function postGoodsReceiptPost($delivery_document, $actual_goods_movement_date = null, string $contentType = self::contentTypes['postGoodsReceiptPost'][0])
    {
        list($response) = $this->postGoodsReceiptPostWithHttpInfo($delivery_document, $actual_goods_movement_date, $contentType);
        return $response;
    }

    /**
     * Operation postGoodsReceiptPostWithHttpInfo
     *
     * Posts goods receipt for customer returns delivery.
     *
     * @param  string $delivery_document Delivery   (Value needs to be enclosed in single quotes) (required)
     * @param  string $actual_goods_movement_date Actual GI Date   (Value needs to be enclosed in single quotes and prefixed with &#x60;datetime&#x60;, e.g. &#x60;datetime&#39;2017-12-31T00:00&#39;&#x60;) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postGoodsReceiptPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\CustomerReturnsDelivery\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\CustomerReturnsDelivery\Model\Wrapper6|\BeLenka\SAP\CustomerReturnsDelivery\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function postGoodsReceiptPostWithHttpInfo($delivery_document, $actual_goods_movement_date = null, string $contentType = self::contentTypes['postGoodsReceiptPost'][0])
    {
        $request = $this->postGoodsReceiptPostRequest($delivery_document, $actual_goods_movement_date, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\CustomerReturnsDelivery\Model\Wrapper6' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\CustomerReturnsDelivery\Model\Wrapper6' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\CustomerReturnsDelivery\Model\Wrapper6', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\CustomerReturnsDelivery\Model\Wrapper6';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\CustomerReturnsDelivery\Model\Wrapper6',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation postGoodsReceiptPostAsync
     *
     * Posts goods receipt for customer returns delivery.
     *
     * @param  string $delivery_document Delivery   (Value needs to be enclosed in single quotes) (required)
     * @param  string $actual_goods_movement_date Actual GI Date   (Value needs to be enclosed in single quotes and prefixed with &#x60;datetime&#x60;, e.g. &#x60;datetime&#39;2017-12-31T00:00&#39;&#x60;) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postGoodsReceiptPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postGoodsReceiptPostAsync($delivery_document, $actual_goods_movement_date = null, string $contentType = self::contentTypes['postGoodsReceiptPost'][0])
    {
        return $this->postGoodsReceiptPostAsyncWithHttpInfo($delivery_document, $actual_goods_movement_date, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postGoodsReceiptPostAsyncWithHttpInfo
     *
     * Posts goods receipt for customer returns delivery.
     *
     * @param  string $delivery_document Delivery   (Value needs to be enclosed in single quotes) (required)
     * @param  string $actual_goods_movement_date Actual GI Date   (Value needs to be enclosed in single quotes and prefixed with &#x60;datetime&#x60;, e.g. &#x60;datetime&#39;2017-12-31T00:00&#39;&#x60;) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postGoodsReceiptPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postGoodsReceiptPostAsyncWithHttpInfo($delivery_document, $actual_goods_movement_date = null, string $contentType = self::contentTypes['postGoodsReceiptPost'][0])
    {
        $returnType = '\BeLenka\SAP\CustomerReturnsDelivery\Model\Wrapper6';
        $request = $this->postGoodsReceiptPostRequest($delivery_document, $actual_goods_movement_date, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postGoodsReceiptPost'
     *
     * @param  string $delivery_document Delivery   (Value needs to be enclosed in single quotes) (required)
     * @param  string $actual_goods_movement_date Actual GI Date   (Value needs to be enclosed in single quotes and prefixed with &#x60;datetime&#x60;, e.g. &#x60;datetime&#39;2017-12-31T00:00&#39;&#x60;) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postGoodsReceiptPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postGoodsReceiptPostRequest($delivery_document, $actual_goods_movement_date = null, string $contentType = self::contentTypes['postGoodsReceiptPost'][0])
    {

        // verify the required parameter 'delivery_document' is set
        if ($delivery_document === null || (is_array($delivery_document) && count($delivery_document) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_document when calling postGoodsReceiptPost'
            );
        }
        if (strlen($delivery_document) > 12) {
            throw new \InvalidArgumentException('invalid length for "$delivery_document" when calling CustomerReturnsDeliveryHeadersApi.postGoodsReceiptPost, must be smaller than or equal to 12.');
        }
        if (!preg_match("/^'[^']*(''[^']*)*'$/", $delivery_document)) {
            throw new \InvalidArgumentException("invalid value for \"delivery_document\" when calling CustomerReturnsDeliveryHeadersApi.postGoodsReceiptPost, must conform to the pattern /^'[^']*(''[^']*)*'$/.");
        }
        
        if ($actual_goods_movement_date !== null && !preg_match("/^datetime'[0-9]{4}-[0-9]{2}-[0-9]{2}T00:00'$/", $actual_goods_movement_date)) {
            throw new \InvalidArgumentException("invalid value for \"actual_goods_movement_date\" when calling CustomerReturnsDeliveryHeadersApi.postGoodsReceiptPost, must conform to the pattern /^datetime'[0-9]{4}-[0-9]{2}-[0-9]{2}T00:00'$/.");
        }
        

        $resourcePath = '/PostGoodsReceipt';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $actual_goods_movement_date,
            'ActualGoodsMovementDate', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $delivery_document,
            'DeliveryDocument', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putawayAllItemsPost
     *
     * Takes over delivery quantity as putaway quantity for all customer returns delivery items.
     *
     * @param  string $delivery_document Delivery   (Value needs to be enclosed in single quotes) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putawayAllItemsPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\CustomerReturnsDelivery\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\CustomerReturnsDelivery\Model\Wrapper6|\BeLenka\SAP\CustomerReturnsDelivery\Model\Error
     */
    public function putawayAllItemsPost($delivery_document, string $contentType = self::contentTypes['putawayAllItemsPost'][0])
    {
        list($response) = $this->putawayAllItemsPostWithHttpInfo($delivery_document, $contentType);
        return $response;
    }

    /**
     * Operation putawayAllItemsPostWithHttpInfo
     *
     * Takes over delivery quantity as putaway quantity for all customer returns delivery items.
     *
     * @param  string $delivery_document Delivery   (Value needs to be enclosed in single quotes) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putawayAllItemsPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\CustomerReturnsDelivery\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\CustomerReturnsDelivery\Model\Wrapper6|\BeLenka\SAP\CustomerReturnsDelivery\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function putawayAllItemsPostWithHttpInfo($delivery_document, string $contentType = self::contentTypes['putawayAllItemsPost'][0])
    {
        $request = $this->putawayAllItemsPostRequest($delivery_document, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\CustomerReturnsDelivery\Model\Wrapper6' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\CustomerReturnsDelivery\Model\Wrapper6' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\CustomerReturnsDelivery\Model\Wrapper6', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\CustomerReturnsDelivery\Model\Wrapper6';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\CustomerReturnsDelivery\Model\Wrapper6',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation putawayAllItemsPostAsync
     *
     * Takes over delivery quantity as putaway quantity for all customer returns delivery items.
     *
     * @param  string $delivery_document Delivery   (Value needs to be enclosed in single quotes) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putawayAllItemsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putawayAllItemsPostAsync($delivery_document, string $contentType = self::contentTypes['putawayAllItemsPost'][0])
    {
        return $this->putawayAllItemsPostAsyncWithHttpInfo($delivery_document, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putawayAllItemsPostAsyncWithHttpInfo
     *
     * Takes over delivery quantity as putaway quantity for all customer returns delivery items.
     *
     * @param  string $delivery_document Delivery   (Value needs to be enclosed in single quotes) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putawayAllItemsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putawayAllItemsPostAsyncWithHttpInfo($delivery_document, string $contentType = self::contentTypes['putawayAllItemsPost'][0])
    {
        $returnType = '\BeLenka\SAP\CustomerReturnsDelivery\Model\Wrapper6';
        $request = $this->putawayAllItemsPostRequest($delivery_document, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putawayAllItemsPost'
     *
     * @param  string $delivery_document Delivery   (Value needs to be enclosed in single quotes) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putawayAllItemsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function putawayAllItemsPostRequest($delivery_document, string $contentType = self::contentTypes['putawayAllItemsPost'][0])
    {

        // verify the required parameter 'delivery_document' is set
        if ($delivery_document === null || (is_array($delivery_document) && count($delivery_document) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_document when calling putawayAllItemsPost'
            );
        }
        if (strlen($delivery_document) > 12) {
            throw new \InvalidArgumentException('invalid length for "$delivery_document" when calling CustomerReturnsDeliveryHeadersApi.putawayAllItemsPost, must be smaller than or equal to 12.');
        }
        if (!preg_match("/^'[^']*(''[^']*)*'$/", $delivery_document)) {
            throw new \InvalidArgumentException("invalid value for \"delivery_document\" when calling CustomerReturnsDeliveryHeadersApi.putawayAllItemsPost, must conform to the pattern /^'[^']*(''[^']*)*'$/.");
        }
        

        $resourcePath = '/PutawayAllItems';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $delivery_document,
            'DeliveryDocument', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putawayOneItemPost
     *
     * Takes over delivery quantity as putaway quantity for specified customer returns delivery item.
     *
     * @param  string $delivery_document Delivery   (Value needs to be enclosed in single quotes) (required)
     * @param  string $delivery_document_item Item   (Value needs to be enclosed in single quotes) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putawayOneItemPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\CustomerReturnsDelivery\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\CustomerReturnsDelivery\Model\Wrapper6|\BeLenka\SAP\CustomerReturnsDelivery\Model\Error
     */
    public function putawayOneItemPost($delivery_document, $delivery_document_item, string $contentType = self::contentTypes['putawayOneItemPost'][0])
    {
        list($response) = $this->putawayOneItemPostWithHttpInfo($delivery_document, $delivery_document_item, $contentType);
        return $response;
    }

    /**
     * Operation putawayOneItemPostWithHttpInfo
     *
     * Takes over delivery quantity as putaway quantity for specified customer returns delivery item.
     *
     * @param  string $delivery_document Delivery   (Value needs to be enclosed in single quotes) (required)
     * @param  string $delivery_document_item Item   (Value needs to be enclosed in single quotes) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putawayOneItemPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\CustomerReturnsDelivery\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\CustomerReturnsDelivery\Model\Wrapper6|\BeLenka\SAP\CustomerReturnsDelivery\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function putawayOneItemPostWithHttpInfo($delivery_document, $delivery_document_item, string $contentType = self::contentTypes['putawayOneItemPost'][0])
    {
        $request = $this->putawayOneItemPostRequest($delivery_document, $delivery_document_item, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\CustomerReturnsDelivery\Model\Wrapper6' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\CustomerReturnsDelivery\Model\Wrapper6' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\CustomerReturnsDelivery\Model\Wrapper6', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\CustomerReturnsDelivery\Model\Wrapper6';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\CustomerReturnsDelivery\Model\Wrapper6',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation putawayOneItemPostAsync
     *
     * Takes over delivery quantity as putaway quantity for specified customer returns delivery item.
     *
     * @param  string $delivery_document Delivery   (Value needs to be enclosed in single quotes) (required)
     * @param  string $delivery_document_item Item   (Value needs to be enclosed in single quotes) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putawayOneItemPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putawayOneItemPostAsync($delivery_document, $delivery_document_item, string $contentType = self::contentTypes['putawayOneItemPost'][0])
    {
        return $this->putawayOneItemPostAsyncWithHttpInfo($delivery_document, $delivery_document_item, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putawayOneItemPostAsyncWithHttpInfo
     *
     * Takes over delivery quantity as putaway quantity for specified customer returns delivery item.
     *
     * @param  string $delivery_document Delivery   (Value needs to be enclosed in single quotes) (required)
     * @param  string $delivery_document_item Item   (Value needs to be enclosed in single quotes) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putawayOneItemPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putawayOneItemPostAsyncWithHttpInfo($delivery_document, $delivery_document_item, string $contentType = self::contentTypes['putawayOneItemPost'][0])
    {
        $returnType = '\BeLenka\SAP\CustomerReturnsDelivery\Model\Wrapper6';
        $request = $this->putawayOneItemPostRequest($delivery_document, $delivery_document_item, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putawayOneItemPost'
     *
     * @param  string $delivery_document Delivery   (Value needs to be enclosed in single quotes) (required)
     * @param  string $delivery_document_item Item   (Value needs to be enclosed in single quotes) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putawayOneItemPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function putawayOneItemPostRequest($delivery_document, $delivery_document_item, string $contentType = self::contentTypes['putawayOneItemPost'][0])
    {

        // verify the required parameter 'delivery_document' is set
        if ($delivery_document === null || (is_array($delivery_document) && count($delivery_document) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_document when calling putawayOneItemPost'
            );
        }
        if (strlen($delivery_document) > 12) {
            throw new \InvalidArgumentException('invalid length for "$delivery_document" when calling CustomerReturnsDeliveryHeadersApi.putawayOneItemPost, must be smaller than or equal to 12.');
        }
        if (!preg_match("/^'[^']*(''[^']*)*'$/", $delivery_document)) {
            throw new \InvalidArgumentException("invalid value for \"delivery_document\" when calling CustomerReturnsDeliveryHeadersApi.putawayOneItemPost, must conform to the pattern /^'[^']*(''[^']*)*'$/.");
        }
        
        // verify the required parameter 'delivery_document_item' is set
        if ($delivery_document_item === null || (is_array($delivery_document_item) && count($delivery_document_item) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_document_item when calling putawayOneItemPost'
            );
        }
        if (strlen($delivery_document_item) > 8) {
            throw new \InvalidArgumentException('invalid length for "$delivery_document_item" when calling CustomerReturnsDeliveryHeadersApi.putawayOneItemPost, must be smaller than or equal to 8.');
        }
        if (!preg_match("/^'[^']*(''[^']*)*'$/", $delivery_document_item)) {
            throw new \InvalidArgumentException("invalid value for \"delivery_document_item\" when calling CustomerReturnsDeliveryHeadersApi.putawayOneItemPost, must conform to the pattern /^'[^']*(''[^']*)*'$/.");
        }
        

        $resourcePath = '/PutawayOneItem';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $delivery_document,
            'DeliveryDocument', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $delivery_document_item,
            'DeliveryDocumentItem', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putawayOneItemWithBaseQuantityPost
     *
     * Sets putaway quantity and delivery quantity for customer returns delivery item.
     *
     * @param  string $delivery_document Delivery   (Value needs to be enclosed in single quotes) (required)
     * @param  string $base_unit Base Unit   (Value needs to be enclosed in single quotes) (required)
     * @param  string $actual_delivered_qty_in_base_unit Qty (stckp.unt)   (Value needs to be suffixed with &#x60;M&#x60;) (required)
     * @param  string $delivery_document_item Item   (Value needs to be enclosed in single quotes) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putawayOneItemWithBaseQuantityPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\CustomerReturnsDelivery\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\CustomerReturnsDelivery\Model\Wrapper6|\BeLenka\SAP\CustomerReturnsDelivery\Model\Error
     */
    public function putawayOneItemWithBaseQuantityPost($delivery_document, $base_unit, $actual_delivered_qty_in_base_unit, $delivery_document_item, string $contentType = self::contentTypes['putawayOneItemWithBaseQuantityPost'][0])
    {
        list($response) = $this->putawayOneItemWithBaseQuantityPostWithHttpInfo($delivery_document, $base_unit, $actual_delivered_qty_in_base_unit, $delivery_document_item, $contentType);
        return $response;
    }

    /**
     * Operation putawayOneItemWithBaseQuantityPostWithHttpInfo
     *
     * Sets putaway quantity and delivery quantity for customer returns delivery item.
     *
     * @param  string $delivery_document Delivery   (Value needs to be enclosed in single quotes) (required)
     * @param  string $base_unit Base Unit   (Value needs to be enclosed in single quotes) (required)
     * @param  string $actual_delivered_qty_in_base_unit Qty (stckp.unt)   (Value needs to be suffixed with &#x60;M&#x60;) (required)
     * @param  string $delivery_document_item Item   (Value needs to be enclosed in single quotes) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putawayOneItemWithBaseQuantityPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\CustomerReturnsDelivery\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\CustomerReturnsDelivery\Model\Wrapper6|\BeLenka\SAP\CustomerReturnsDelivery\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function putawayOneItemWithBaseQuantityPostWithHttpInfo($delivery_document, $base_unit, $actual_delivered_qty_in_base_unit, $delivery_document_item, string $contentType = self::contentTypes['putawayOneItemWithBaseQuantityPost'][0])
    {
        $request = $this->putawayOneItemWithBaseQuantityPostRequest($delivery_document, $base_unit, $actual_delivered_qty_in_base_unit, $delivery_document_item, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\CustomerReturnsDelivery\Model\Wrapper6' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\CustomerReturnsDelivery\Model\Wrapper6' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\CustomerReturnsDelivery\Model\Wrapper6', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\CustomerReturnsDelivery\Model\Wrapper6';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\CustomerReturnsDelivery\Model\Wrapper6',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation putawayOneItemWithBaseQuantityPostAsync
     *
     * Sets putaway quantity and delivery quantity for customer returns delivery item.
     *
     * @param  string $delivery_document Delivery   (Value needs to be enclosed in single quotes) (required)
     * @param  string $base_unit Base Unit   (Value needs to be enclosed in single quotes) (required)
     * @param  string $actual_delivered_qty_in_base_unit Qty (stckp.unt)   (Value needs to be suffixed with &#x60;M&#x60;) (required)
     * @param  string $delivery_document_item Item   (Value needs to be enclosed in single quotes) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putawayOneItemWithBaseQuantityPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putawayOneItemWithBaseQuantityPostAsync($delivery_document, $base_unit, $actual_delivered_qty_in_base_unit, $delivery_document_item, string $contentType = self::contentTypes['putawayOneItemWithBaseQuantityPost'][0])
    {
        return $this->putawayOneItemWithBaseQuantityPostAsyncWithHttpInfo($delivery_document, $base_unit, $actual_delivered_qty_in_base_unit, $delivery_document_item, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putawayOneItemWithBaseQuantityPostAsyncWithHttpInfo
     *
     * Sets putaway quantity and delivery quantity for customer returns delivery item.
     *
     * @param  string $delivery_document Delivery   (Value needs to be enclosed in single quotes) (required)
     * @param  string $base_unit Base Unit   (Value needs to be enclosed in single quotes) (required)
     * @param  string $actual_delivered_qty_in_base_unit Qty (stckp.unt)   (Value needs to be suffixed with &#x60;M&#x60;) (required)
     * @param  string $delivery_document_item Item   (Value needs to be enclosed in single quotes) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putawayOneItemWithBaseQuantityPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putawayOneItemWithBaseQuantityPostAsyncWithHttpInfo($delivery_document, $base_unit, $actual_delivered_qty_in_base_unit, $delivery_document_item, string $contentType = self::contentTypes['putawayOneItemWithBaseQuantityPost'][0])
    {
        $returnType = '\BeLenka\SAP\CustomerReturnsDelivery\Model\Wrapper6';
        $request = $this->putawayOneItemWithBaseQuantityPostRequest($delivery_document, $base_unit, $actual_delivered_qty_in_base_unit, $delivery_document_item, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putawayOneItemWithBaseQuantityPost'
     *
     * @param  string $delivery_document Delivery   (Value needs to be enclosed in single quotes) (required)
     * @param  string $base_unit Base Unit   (Value needs to be enclosed in single quotes) (required)
     * @param  string $actual_delivered_qty_in_base_unit Qty (stckp.unt)   (Value needs to be suffixed with &#x60;M&#x60;) (required)
     * @param  string $delivery_document_item Item   (Value needs to be enclosed in single quotes) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putawayOneItemWithBaseQuantityPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function putawayOneItemWithBaseQuantityPostRequest($delivery_document, $base_unit, $actual_delivered_qty_in_base_unit, $delivery_document_item, string $contentType = self::contentTypes['putawayOneItemWithBaseQuantityPost'][0])
    {

        // verify the required parameter 'delivery_document' is set
        if ($delivery_document === null || (is_array($delivery_document) && count($delivery_document) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_document when calling putawayOneItemWithBaseQuantityPost'
            );
        }
        if (strlen($delivery_document) > 12) {
            throw new \InvalidArgumentException('invalid length for "$delivery_document" when calling CustomerReturnsDeliveryHeadersApi.putawayOneItemWithBaseQuantityPost, must be smaller than or equal to 12.');
        }
        if (!preg_match("/^'[^']*(''[^']*)*'$/", $delivery_document)) {
            throw new \InvalidArgumentException("invalid value for \"delivery_document\" when calling CustomerReturnsDeliveryHeadersApi.putawayOneItemWithBaseQuantityPost, must conform to the pattern /^'[^']*(''[^']*)*'$/.");
        }
        
        // verify the required parameter 'base_unit' is set
        if ($base_unit === null || (is_array($base_unit) && count($base_unit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $base_unit when calling putawayOneItemWithBaseQuantityPost'
            );
        }
        if (strlen($base_unit) > 5) {
            throw new \InvalidArgumentException('invalid length for "$base_unit" when calling CustomerReturnsDeliveryHeadersApi.putawayOneItemWithBaseQuantityPost, must be smaller than or equal to 5.');
        }
        if (!preg_match("/^'[^']*(''[^']*)*'$/", $base_unit)) {
            throw new \InvalidArgumentException("invalid value for \"base_unit\" when calling CustomerReturnsDeliveryHeadersApi.putawayOneItemWithBaseQuantityPost, must conform to the pattern /^'[^']*(''[^']*)*'$/.");
        }
        
        // verify the required parameter 'actual_delivered_qty_in_base_unit' is set
        if ($actual_delivered_qty_in_base_unit === null || (is_array($actual_delivered_qty_in_base_unit) && count($actual_delivered_qty_in_base_unit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $actual_delivered_qty_in_base_unit when calling putawayOneItemWithBaseQuantityPost'
            );
        }
        if (!preg_match("/^[-]?[0-9]+(\\.[0-9]+)?[mM]$/", $actual_delivered_qty_in_base_unit)) {
            throw new \InvalidArgumentException("invalid value for \"actual_delivered_qty_in_base_unit\" when calling CustomerReturnsDeliveryHeadersApi.putawayOneItemWithBaseQuantityPost, must conform to the pattern /^[-]?[0-9]+(\\.[0-9]+)?[mM]$/.");
        }
        
        // verify the required parameter 'delivery_document_item' is set
        if ($delivery_document_item === null || (is_array($delivery_document_item) && count($delivery_document_item) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_document_item when calling putawayOneItemWithBaseQuantityPost'
            );
        }
        if (strlen($delivery_document_item) > 8) {
            throw new \InvalidArgumentException('invalid length for "$delivery_document_item" when calling CustomerReturnsDeliveryHeadersApi.putawayOneItemWithBaseQuantityPost, must be smaller than or equal to 8.');
        }
        if (!preg_match("/^'[^']*(''[^']*)*'$/", $delivery_document_item)) {
            throw new \InvalidArgumentException("invalid value for \"delivery_document_item\" when calling CustomerReturnsDeliveryHeadersApi.putawayOneItemWithBaseQuantityPost, must conform to the pattern /^'[^']*(''[^']*)*'$/.");
        }
        

        $resourcePath = '/PutawayOneItemWithBaseQuantity';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $delivery_document,
            'DeliveryDocument', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $base_unit,
            'BaseUnit', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $actual_delivered_qty_in_base_unit,
            'ActualDeliveredQtyInBaseUnit', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $delivery_document_item,
            'DeliveryDocumentItem', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putawayOneItemWithSalesQuantityPost
     *
     * Sets putaway quantity and delivery quantity for customer returns delivery item.
     *
     * @param  string $actual_delivery_quantity Delivery qty   (Value needs to be suffixed with &#x60;M&#x60;) (required)
     * @param  string $delivery_quantity_unit Sales Unit   (Value needs to be enclosed in single quotes) (required)
     * @param  string $delivery_document_item Item   (Value needs to be enclosed in single quotes) (required)
     * @param  string $delivery_document Delivery   (Value needs to be enclosed in single quotes) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putawayOneItemWithSalesQuantityPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\CustomerReturnsDelivery\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\CustomerReturnsDelivery\Model\Wrapper6|\BeLenka\SAP\CustomerReturnsDelivery\Model\Error
     */
    public function putawayOneItemWithSalesQuantityPost($actual_delivery_quantity, $delivery_quantity_unit, $delivery_document_item, $delivery_document, string $contentType = self::contentTypes['putawayOneItemWithSalesQuantityPost'][0])
    {
        list($response) = $this->putawayOneItemWithSalesQuantityPostWithHttpInfo($actual_delivery_quantity, $delivery_quantity_unit, $delivery_document_item, $delivery_document, $contentType);
        return $response;
    }

    /**
     * Operation putawayOneItemWithSalesQuantityPostWithHttpInfo
     *
     * Sets putaway quantity and delivery quantity for customer returns delivery item.
     *
     * @param  string $actual_delivery_quantity Delivery qty   (Value needs to be suffixed with &#x60;M&#x60;) (required)
     * @param  string $delivery_quantity_unit Sales Unit   (Value needs to be enclosed in single quotes) (required)
     * @param  string $delivery_document_item Item   (Value needs to be enclosed in single quotes) (required)
     * @param  string $delivery_document Delivery   (Value needs to be enclosed in single quotes) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putawayOneItemWithSalesQuantityPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\CustomerReturnsDelivery\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\CustomerReturnsDelivery\Model\Wrapper6|\BeLenka\SAP\CustomerReturnsDelivery\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function putawayOneItemWithSalesQuantityPostWithHttpInfo($actual_delivery_quantity, $delivery_quantity_unit, $delivery_document_item, $delivery_document, string $contentType = self::contentTypes['putawayOneItemWithSalesQuantityPost'][0])
    {
        $request = $this->putawayOneItemWithSalesQuantityPostRequest($actual_delivery_quantity, $delivery_quantity_unit, $delivery_document_item, $delivery_document, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\CustomerReturnsDelivery\Model\Wrapper6' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\CustomerReturnsDelivery\Model\Wrapper6' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\CustomerReturnsDelivery\Model\Wrapper6', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\CustomerReturnsDelivery\Model\Wrapper6';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\CustomerReturnsDelivery\Model\Wrapper6',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation putawayOneItemWithSalesQuantityPostAsync
     *
     * Sets putaway quantity and delivery quantity for customer returns delivery item.
     *
     * @param  string $actual_delivery_quantity Delivery qty   (Value needs to be suffixed with &#x60;M&#x60;) (required)
     * @param  string $delivery_quantity_unit Sales Unit   (Value needs to be enclosed in single quotes) (required)
     * @param  string $delivery_document_item Item   (Value needs to be enclosed in single quotes) (required)
     * @param  string $delivery_document Delivery   (Value needs to be enclosed in single quotes) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putawayOneItemWithSalesQuantityPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putawayOneItemWithSalesQuantityPostAsync($actual_delivery_quantity, $delivery_quantity_unit, $delivery_document_item, $delivery_document, string $contentType = self::contentTypes['putawayOneItemWithSalesQuantityPost'][0])
    {
        return $this->putawayOneItemWithSalesQuantityPostAsyncWithHttpInfo($actual_delivery_quantity, $delivery_quantity_unit, $delivery_document_item, $delivery_document, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putawayOneItemWithSalesQuantityPostAsyncWithHttpInfo
     *
     * Sets putaway quantity and delivery quantity for customer returns delivery item.
     *
     * @param  string $actual_delivery_quantity Delivery qty   (Value needs to be suffixed with &#x60;M&#x60;) (required)
     * @param  string $delivery_quantity_unit Sales Unit   (Value needs to be enclosed in single quotes) (required)
     * @param  string $delivery_document_item Item   (Value needs to be enclosed in single quotes) (required)
     * @param  string $delivery_document Delivery   (Value needs to be enclosed in single quotes) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putawayOneItemWithSalesQuantityPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putawayOneItemWithSalesQuantityPostAsyncWithHttpInfo($actual_delivery_quantity, $delivery_quantity_unit, $delivery_document_item, $delivery_document, string $contentType = self::contentTypes['putawayOneItemWithSalesQuantityPost'][0])
    {
        $returnType = '\BeLenka\SAP\CustomerReturnsDelivery\Model\Wrapper6';
        $request = $this->putawayOneItemWithSalesQuantityPostRequest($actual_delivery_quantity, $delivery_quantity_unit, $delivery_document_item, $delivery_document, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putawayOneItemWithSalesQuantityPost'
     *
     * @param  string $actual_delivery_quantity Delivery qty   (Value needs to be suffixed with &#x60;M&#x60;) (required)
     * @param  string $delivery_quantity_unit Sales Unit   (Value needs to be enclosed in single quotes) (required)
     * @param  string $delivery_document_item Item   (Value needs to be enclosed in single quotes) (required)
     * @param  string $delivery_document Delivery   (Value needs to be enclosed in single quotes) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putawayOneItemWithSalesQuantityPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function putawayOneItemWithSalesQuantityPostRequest($actual_delivery_quantity, $delivery_quantity_unit, $delivery_document_item, $delivery_document, string $contentType = self::contentTypes['putawayOneItemWithSalesQuantityPost'][0])
    {

        // verify the required parameter 'actual_delivery_quantity' is set
        if ($actual_delivery_quantity === null || (is_array($actual_delivery_quantity) && count($actual_delivery_quantity) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $actual_delivery_quantity when calling putawayOneItemWithSalesQuantityPost'
            );
        }
        if (!preg_match("/^[-]?[0-9]+(\\.[0-9]+)?[mM]$/", $actual_delivery_quantity)) {
            throw new \InvalidArgumentException("invalid value for \"actual_delivery_quantity\" when calling CustomerReturnsDeliveryHeadersApi.putawayOneItemWithSalesQuantityPost, must conform to the pattern /^[-]?[0-9]+(\\.[0-9]+)?[mM]$/.");
        }
        
        // verify the required parameter 'delivery_quantity_unit' is set
        if ($delivery_quantity_unit === null || (is_array($delivery_quantity_unit) && count($delivery_quantity_unit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_quantity_unit when calling putawayOneItemWithSalesQuantityPost'
            );
        }
        if (strlen($delivery_quantity_unit) > 5) {
            throw new \InvalidArgumentException('invalid length for "$delivery_quantity_unit" when calling CustomerReturnsDeliveryHeadersApi.putawayOneItemWithSalesQuantityPost, must be smaller than or equal to 5.');
        }
        if (!preg_match("/^'[^']*(''[^']*)*'$/", $delivery_quantity_unit)) {
            throw new \InvalidArgumentException("invalid value for \"delivery_quantity_unit\" when calling CustomerReturnsDeliveryHeadersApi.putawayOneItemWithSalesQuantityPost, must conform to the pattern /^'[^']*(''[^']*)*'$/.");
        }
        
        // verify the required parameter 'delivery_document_item' is set
        if ($delivery_document_item === null || (is_array($delivery_document_item) && count($delivery_document_item) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_document_item when calling putawayOneItemWithSalesQuantityPost'
            );
        }
        if (strlen($delivery_document_item) > 8) {
            throw new \InvalidArgumentException('invalid length for "$delivery_document_item" when calling CustomerReturnsDeliveryHeadersApi.putawayOneItemWithSalesQuantityPost, must be smaller than or equal to 8.');
        }
        if (!preg_match("/^'[^']*(''[^']*)*'$/", $delivery_document_item)) {
            throw new \InvalidArgumentException("invalid value for \"delivery_document_item\" when calling CustomerReturnsDeliveryHeadersApi.putawayOneItemWithSalesQuantityPost, must conform to the pattern /^'[^']*(''[^']*)*'$/.");
        }
        
        // verify the required parameter 'delivery_document' is set
        if ($delivery_document === null || (is_array($delivery_document) && count($delivery_document) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_document when calling putawayOneItemWithSalesQuantityPost'
            );
        }
        if (strlen($delivery_document) > 12) {
            throw new \InvalidArgumentException('invalid length for "$delivery_document" when calling CustomerReturnsDeliveryHeadersApi.putawayOneItemWithSalesQuantityPost, must be smaller than or equal to 12.');
        }
        if (!preg_match("/^'[^']*(''[^']*)*'$/", $delivery_document)) {
            throw new \InvalidArgumentException("invalid value for \"delivery_document\" when calling CustomerReturnsDeliveryHeadersApi.putawayOneItemWithSalesQuantityPost, must conform to the pattern /^'[^']*(''[^']*)*'$/.");
        }
        

        $resourcePath = '/PutawayOneItemWithSalesQuantity';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $actual_delivery_quantity,
            'ActualDeliveryQuantity', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $delivery_quantity_unit,
            'DeliveryQuantityUnit', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $delivery_document_item,
            'DeliveryDocumentItem', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $delivery_document,
            'DeliveryDocument', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation reverseGoodsReceiptPost
     *
     * Reverses goods receipt for customer returns delivery.
     *
     * @param  string $actual_goods_movement_date Actual GI Date   (Value needs to be enclosed in single quotes and prefixed with &#x60;datetime&#x60;, e.g. &#x60;datetime&#39;2017-12-31T00:00&#39;&#x60;) (required)
     * @param  string $delivery_document Delivery   (Value needs to be enclosed in single quotes) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reverseGoodsReceiptPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\CustomerReturnsDelivery\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\CustomerReturnsDelivery\Model\Wrapper5|\BeLenka\SAP\CustomerReturnsDelivery\Model\Error
     */
    public function reverseGoodsReceiptPost($actual_goods_movement_date, $delivery_document, string $contentType = self::contentTypes['reverseGoodsReceiptPost'][0])
    {
        list($response) = $this->reverseGoodsReceiptPostWithHttpInfo($actual_goods_movement_date, $delivery_document, $contentType);
        return $response;
    }

    /**
     * Operation reverseGoodsReceiptPostWithHttpInfo
     *
     * Reverses goods receipt for customer returns delivery.
     *
     * @param  string $actual_goods_movement_date Actual GI Date   (Value needs to be enclosed in single quotes and prefixed with &#x60;datetime&#x60;, e.g. &#x60;datetime&#39;2017-12-31T00:00&#39;&#x60;) (required)
     * @param  string $delivery_document Delivery   (Value needs to be enclosed in single quotes) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reverseGoodsReceiptPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\CustomerReturnsDelivery\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\CustomerReturnsDelivery\Model\Wrapper5|\BeLenka\SAP\CustomerReturnsDelivery\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function reverseGoodsReceiptPostWithHttpInfo($actual_goods_movement_date, $delivery_document, string $contentType = self::contentTypes['reverseGoodsReceiptPost'][0])
    {
        $request = $this->reverseGoodsReceiptPostRequest($actual_goods_movement_date, $delivery_document, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\CustomerReturnsDelivery\Model\Wrapper5' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\CustomerReturnsDelivery\Model\Wrapper5' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\CustomerReturnsDelivery\Model\Wrapper5', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\CustomerReturnsDelivery\Model\Wrapper5';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\CustomerReturnsDelivery\Model\Wrapper5',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation reverseGoodsReceiptPostAsync
     *
     * Reverses goods receipt for customer returns delivery.
     *
     * @param  string $actual_goods_movement_date Actual GI Date   (Value needs to be enclosed in single quotes and prefixed with &#x60;datetime&#x60;, e.g. &#x60;datetime&#39;2017-12-31T00:00&#39;&#x60;) (required)
     * @param  string $delivery_document Delivery   (Value needs to be enclosed in single quotes) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reverseGoodsReceiptPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reverseGoodsReceiptPostAsync($actual_goods_movement_date, $delivery_document, string $contentType = self::contentTypes['reverseGoodsReceiptPost'][0])
    {
        return $this->reverseGoodsReceiptPostAsyncWithHttpInfo($actual_goods_movement_date, $delivery_document, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation reverseGoodsReceiptPostAsyncWithHttpInfo
     *
     * Reverses goods receipt for customer returns delivery.
     *
     * @param  string $actual_goods_movement_date Actual GI Date   (Value needs to be enclosed in single quotes and prefixed with &#x60;datetime&#x60;, e.g. &#x60;datetime&#39;2017-12-31T00:00&#39;&#x60;) (required)
     * @param  string $delivery_document Delivery   (Value needs to be enclosed in single quotes) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reverseGoodsReceiptPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reverseGoodsReceiptPostAsyncWithHttpInfo($actual_goods_movement_date, $delivery_document, string $contentType = self::contentTypes['reverseGoodsReceiptPost'][0])
    {
        $returnType = '\BeLenka\SAP\CustomerReturnsDelivery\Model\Wrapper5';
        $request = $this->reverseGoodsReceiptPostRequest($actual_goods_movement_date, $delivery_document, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'reverseGoodsReceiptPost'
     *
     * @param  string $actual_goods_movement_date Actual GI Date   (Value needs to be enclosed in single quotes and prefixed with &#x60;datetime&#x60;, e.g. &#x60;datetime&#39;2017-12-31T00:00&#39;&#x60;) (required)
     * @param  string $delivery_document Delivery   (Value needs to be enclosed in single quotes) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reverseGoodsReceiptPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function reverseGoodsReceiptPostRequest($actual_goods_movement_date, $delivery_document, string $contentType = self::contentTypes['reverseGoodsReceiptPost'][0])
    {

        // verify the required parameter 'actual_goods_movement_date' is set
        if ($actual_goods_movement_date === null || (is_array($actual_goods_movement_date) && count($actual_goods_movement_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $actual_goods_movement_date when calling reverseGoodsReceiptPost'
            );
        }
        if (!preg_match("/^datetime'[0-9]{4}-[0-9]{2}-[0-9]{2}T00:00'$/", $actual_goods_movement_date)) {
            throw new \InvalidArgumentException("invalid value for \"actual_goods_movement_date\" when calling CustomerReturnsDeliveryHeadersApi.reverseGoodsReceiptPost, must conform to the pattern /^datetime'[0-9]{4}-[0-9]{2}-[0-9]{2}T00:00'$/.");
        }
        
        // verify the required parameter 'delivery_document' is set
        if ($delivery_document === null || (is_array($delivery_document) && count($delivery_document) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_document when calling reverseGoodsReceiptPost'
            );
        }
        if (strlen($delivery_document) > 12) {
            throw new \InvalidArgumentException('invalid length for "$delivery_document" when calling CustomerReturnsDeliveryHeadersApi.reverseGoodsReceiptPost, must be smaller than or equal to 12.');
        }
        if (!preg_match("/^'[^']*(''[^']*)*'$/", $delivery_document)) {
            throw new \InvalidArgumentException("invalid value for \"delivery_document\" when calling CustomerReturnsDeliveryHeadersApi.reverseGoodsReceiptPost, must conform to the pattern /^'[^']*(''[^']*)*'$/.");
        }
        

        $resourcePath = '/ReverseGoodsReceipt';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $actual_goods_movement_date,
            'ActualGoodsMovementDate', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $delivery_document,
            'DeliveryDocument', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setPutawayQuantityWithBaseQuantityPost
     *
     * Sets putaway quantity in base unit of measure for delivery item.
     *
     * @param  string $delivery_document_item Item   (Value needs to be enclosed in single quotes) (required)
     * @param  string $delivery_document Delivery   (Value needs to be enclosed in single quotes) (required)
     * @param  string $base_unit Base Unit   (Value needs to be enclosed in single quotes) (required)
     * @param  string $actual_delivered_qty_in_base_unit Qty (stckp.unt)   (Value needs to be suffixed with &#x60;M&#x60;) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setPutawayQuantityWithBaseQuantityPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\CustomerReturnsDelivery\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\CustomerReturnsDelivery\Model\Wrapper6|\BeLenka\SAP\CustomerReturnsDelivery\Model\Error
     */
    public function setPutawayQuantityWithBaseQuantityPost($delivery_document_item, $delivery_document, $base_unit, $actual_delivered_qty_in_base_unit, string $contentType = self::contentTypes['setPutawayQuantityWithBaseQuantityPost'][0])
    {
        list($response) = $this->setPutawayQuantityWithBaseQuantityPostWithHttpInfo($delivery_document_item, $delivery_document, $base_unit, $actual_delivered_qty_in_base_unit, $contentType);
        return $response;
    }

    /**
     * Operation setPutawayQuantityWithBaseQuantityPostWithHttpInfo
     *
     * Sets putaway quantity in base unit of measure for delivery item.
     *
     * @param  string $delivery_document_item Item   (Value needs to be enclosed in single quotes) (required)
     * @param  string $delivery_document Delivery   (Value needs to be enclosed in single quotes) (required)
     * @param  string $base_unit Base Unit   (Value needs to be enclosed in single quotes) (required)
     * @param  string $actual_delivered_qty_in_base_unit Qty (stckp.unt)   (Value needs to be suffixed with &#x60;M&#x60;) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setPutawayQuantityWithBaseQuantityPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\CustomerReturnsDelivery\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\CustomerReturnsDelivery\Model\Wrapper6|\BeLenka\SAP\CustomerReturnsDelivery\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function setPutawayQuantityWithBaseQuantityPostWithHttpInfo($delivery_document_item, $delivery_document, $base_unit, $actual_delivered_qty_in_base_unit, string $contentType = self::contentTypes['setPutawayQuantityWithBaseQuantityPost'][0])
    {
        $request = $this->setPutawayQuantityWithBaseQuantityPostRequest($delivery_document_item, $delivery_document, $base_unit, $actual_delivered_qty_in_base_unit, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\CustomerReturnsDelivery\Model\Wrapper6' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\CustomerReturnsDelivery\Model\Wrapper6' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\CustomerReturnsDelivery\Model\Wrapper6', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\CustomerReturnsDelivery\Model\Wrapper6';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\CustomerReturnsDelivery\Model\Wrapper6',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation setPutawayQuantityWithBaseQuantityPostAsync
     *
     * Sets putaway quantity in base unit of measure for delivery item.
     *
     * @param  string $delivery_document_item Item   (Value needs to be enclosed in single quotes) (required)
     * @param  string $delivery_document Delivery   (Value needs to be enclosed in single quotes) (required)
     * @param  string $base_unit Base Unit   (Value needs to be enclosed in single quotes) (required)
     * @param  string $actual_delivered_qty_in_base_unit Qty (stckp.unt)   (Value needs to be suffixed with &#x60;M&#x60;) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setPutawayQuantityWithBaseQuantityPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setPutawayQuantityWithBaseQuantityPostAsync($delivery_document_item, $delivery_document, $base_unit, $actual_delivered_qty_in_base_unit, string $contentType = self::contentTypes['setPutawayQuantityWithBaseQuantityPost'][0])
    {
        return $this->setPutawayQuantityWithBaseQuantityPostAsyncWithHttpInfo($delivery_document_item, $delivery_document, $base_unit, $actual_delivered_qty_in_base_unit, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation setPutawayQuantityWithBaseQuantityPostAsyncWithHttpInfo
     *
     * Sets putaway quantity in base unit of measure for delivery item.
     *
     * @param  string $delivery_document_item Item   (Value needs to be enclosed in single quotes) (required)
     * @param  string $delivery_document Delivery   (Value needs to be enclosed in single quotes) (required)
     * @param  string $base_unit Base Unit   (Value needs to be enclosed in single quotes) (required)
     * @param  string $actual_delivered_qty_in_base_unit Qty (stckp.unt)   (Value needs to be suffixed with &#x60;M&#x60;) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setPutawayQuantityWithBaseQuantityPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setPutawayQuantityWithBaseQuantityPostAsyncWithHttpInfo($delivery_document_item, $delivery_document, $base_unit, $actual_delivered_qty_in_base_unit, string $contentType = self::contentTypes['setPutawayQuantityWithBaseQuantityPost'][0])
    {
        $returnType = '\BeLenka\SAP\CustomerReturnsDelivery\Model\Wrapper6';
        $request = $this->setPutawayQuantityWithBaseQuantityPostRequest($delivery_document_item, $delivery_document, $base_unit, $actual_delivered_qty_in_base_unit, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'setPutawayQuantityWithBaseQuantityPost'
     *
     * @param  string $delivery_document_item Item   (Value needs to be enclosed in single quotes) (required)
     * @param  string $delivery_document Delivery   (Value needs to be enclosed in single quotes) (required)
     * @param  string $base_unit Base Unit   (Value needs to be enclosed in single quotes) (required)
     * @param  string $actual_delivered_qty_in_base_unit Qty (stckp.unt)   (Value needs to be suffixed with &#x60;M&#x60;) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setPutawayQuantityWithBaseQuantityPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function setPutawayQuantityWithBaseQuantityPostRequest($delivery_document_item, $delivery_document, $base_unit, $actual_delivered_qty_in_base_unit, string $contentType = self::contentTypes['setPutawayQuantityWithBaseQuantityPost'][0])
    {

        // verify the required parameter 'delivery_document_item' is set
        if ($delivery_document_item === null || (is_array($delivery_document_item) && count($delivery_document_item) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_document_item when calling setPutawayQuantityWithBaseQuantityPost'
            );
        }
        if (strlen($delivery_document_item) > 8) {
            throw new \InvalidArgumentException('invalid length for "$delivery_document_item" when calling CustomerReturnsDeliveryHeadersApi.setPutawayQuantityWithBaseQuantityPost, must be smaller than or equal to 8.');
        }
        if (!preg_match("/^'[^']*(''[^']*)*'$/", $delivery_document_item)) {
            throw new \InvalidArgumentException("invalid value for \"delivery_document_item\" when calling CustomerReturnsDeliveryHeadersApi.setPutawayQuantityWithBaseQuantityPost, must conform to the pattern /^'[^']*(''[^']*)*'$/.");
        }
        
        // verify the required parameter 'delivery_document' is set
        if ($delivery_document === null || (is_array($delivery_document) && count($delivery_document) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_document when calling setPutawayQuantityWithBaseQuantityPost'
            );
        }
        if (strlen($delivery_document) > 12) {
            throw new \InvalidArgumentException('invalid length for "$delivery_document" when calling CustomerReturnsDeliveryHeadersApi.setPutawayQuantityWithBaseQuantityPost, must be smaller than or equal to 12.');
        }
        if (!preg_match("/^'[^']*(''[^']*)*'$/", $delivery_document)) {
            throw new \InvalidArgumentException("invalid value for \"delivery_document\" when calling CustomerReturnsDeliveryHeadersApi.setPutawayQuantityWithBaseQuantityPost, must conform to the pattern /^'[^']*(''[^']*)*'$/.");
        }
        
        // verify the required parameter 'base_unit' is set
        if ($base_unit === null || (is_array($base_unit) && count($base_unit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $base_unit when calling setPutawayQuantityWithBaseQuantityPost'
            );
        }
        if (strlen($base_unit) > 5) {
            throw new \InvalidArgumentException('invalid length for "$base_unit" when calling CustomerReturnsDeliveryHeadersApi.setPutawayQuantityWithBaseQuantityPost, must be smaller than or equal to 5.');
        }
        if (!preg_match("/^'[^']*(''[^']*)*'$/", $base_unit)) {
            throw new \InvalidArgumentException("invalid value for \"base_unit\" when calling CustomerReturnsDeliveryHeadersApi.setPutawayQuantityWithBaseQuantityPost, must conform to the pattern /^'[^']*(''[^']*)*'$/.");
        }
        
        // verify the required parameter 'actual_delivered_qty_in_base_unit' is set
        if ($actual_delivered_qty_in_base_unit === null || (is_array($actual_delivered_qty_in_base_unit) && count($actual_delivered_qty_in_base_unit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $actual_delivered_qty_in_base_unit when calling setPutawayQuantityWithBaseQuantityPost'
            );
        }
        if (!preg_match("/^[-]?[0-9]+(\\.[0-9]+)?[mM]$/", $actual_delivered_qty_in_base_unit)) {
            throw new \InvalidArgumentException("invalid value for \"actual_delivered_qty_in_base_unit\" when calling CustomerReturnsDeliveryHeadersApi.setPutawayQuantityWithBaseQuantityPost, must conform to the pattern /^[-]?[0-9]+(\\.[0-9]+)?[mM]$/.");
        }
        

        $resourcePath = '/SetPutawayQuantityWithBaseQuantity';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $delivery_document_item,
            'DeliveryDocumentItem', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $delivery_document,
            'DeliveryDocument', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $base_unit,
            'BaseUnit', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $actual_delivered_qty_in_base_unit,
            'ActualDeliveredQtyInBaseUnit', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
